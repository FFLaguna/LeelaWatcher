/*
    Copyright 2017 Patrick G. Heck

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 */
package tsb.gui;

import java.awt.*;

/**
 * @author root
 */
public class HelpAboutDlg extends javax.swing.JDialog {

  /**
   * Creates new form helpAboutDlg
   */
  public HelpAboutDlg(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();

    Dimension dm;
    Toolkit tk = Toolkit.getDefaultToolkit();
    dm = tk.getScreenSize();

    pack();
    setSize(450, 300);
    setLocation(dm.width / 2 - 225, dm.height / 2 - 150);
    //System.out.println(aboutText.getCaretPosition());
    aboutText.setCaretPosition(0);
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    aboutScrollpane = new javax.swing.JScrollPane();
    aboutText = new javax.swing.JTextArea();
    aboutButtonPanel = new javax.swing.JPanel();
    OKButton = new javax.swing.JButton();
    getContentPane().setLayout(new java.awt.GridBagLayout());
    java.awt.GridBagConstraints gridBagConstraints1;
    setTitle("About Total Screen Ban");
    addWindowListener(new java.awt.event.WindowAdapter() {
                        public void windowClosing(java.awt.event.WindowEvent evt) {
                          closeDialog(evt);
                        }
                      }
    );

    aboutScrollpane.setPreferredSize(new java.awt.Dimension(0, 0));
    aboutScrollpane.setVerticalScrollBarPolicy(22);
    aboutScrollpane.setMinimumSize(new java.awt.Dimension(0, 0));
    aboutScrollpane.setBackground(java.awt.Color.white);

    aboutText.setWrapStyleWord(true);
    aboutText.setPreferredSize(new java.awt.Dimension(1500, 1500));
    aboutText.setLineWrap(true);
    aboutText.setBorder(new javax.swing.border.MatteBorder(5, 5, 5, 5, java.awt.Color.white));
    aboutText.setEditable(false);
    aboutText.setText("Total Screen Ban 0.1\n\nPatrick G. Heck \nOctober 2001\n\nThis version is extremely preliminary. In some senses it could even be considered a prototype. Some of the classes used here date back to the very beginning of my aquaintance with the java language. The source code is not being made available because I wrote this as I learned java, and it needs a severe cleaning and refactoring. Particularly, the comments in early classes, have to be made useful for javadoc, and the entire thing should be re-worked in swing, rather than the mixed swing and AWT that you see here. For the benefit of those who are viewing this to evaluate me as a candidate for a job position programming Java, I will list what is implemented, what needs tweaking, and what should be implemented in future versions.\n\nCURRENT FEATURES\n o Graphical Board\n o Enforcement of basic rules of Play\n o Automatic Capture and tally of prisoners.\n o Game may be saved in SGF format (SGF version 4).\n o Internal model of game supports variations \n o User Interface designed for maximizing board size.\n o Prefered view set by (ctrl-Lmouse) on prefered view button.\n o Control click a group for some info about it on System.out\n\nCURRENT TWEAK/FIX LIST\n o Document everything.\n o Refactor a few really ugly kludges.\n o Release Source Code.\n o Refactor anything else messy.\n o Speed up drawing of board and eliminate pre-draw of stones. Pre-drawing is unsatisfactory due to a \"feature\" in JDK 1.3 (as well as some earlier versions) whereby circles drawn to a Component are not equal to circles drawn to an image. Also, redrawing after window sizing or uncover is annoyingly long (on my K6-333 box, but not on my Athlon 1333).\n o Move everything to swing.\n o implement tooltips.\n\nTO BE ADDED NEAR TERM\n o Message line reporting why moves are disallowed etc.\n o Support for all buttons that generate a featureNotSupportedDlg\n o A means to set up player names and ranks, komi, etc.\n o Support for handicap games.\n o Support for passing, ending the game, and resigning.\n o A means by which players can hand score the games.\n o Comments entered in the text field appear in save file.\n o Comments cleared after each move.\n o Other features I'm forgetting right now.\n\nTO BE ADDED MID/LONG TERM\n o GUI support for variations.\n o Loading of saved files.\n o Full Implementation of rule sets:\n\tAmerican Go Association\n\tJapaneese\n\tChineese\n\tIng\n\tCustom/Others?\n o Support for all types of board Markup in SGF 4.\n o Support for reading any SGF file (all versions).\n o Automatic Scoring of game.\n o Multiple styles of board/Font options.\n\nTO BE ADDED FAR FUTURE (dreamland)\n o Communication with Go Text Protocol compliant servers and programs.\n o Communication with IGS type servers.\n o Communication with KGS server (if they standardize the interface)\n o Communication with any other server protocol that I can find.\n o An AI opponent, or means to connect with popular opponent programs.\n o Game Databasing for study.\n o Features for study of Fuseki/Joseki/Tesuji.\n o Any thing else that has to do with GO! I want it all in HERE! :)");
    aboutText.setMargin(new java.awt.Insets(10, 10, 10, 10));

    aboutScrollpane.setViewportView(aboutText);


    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 0;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints1.weightx = 1.0;
    gridBagConstraints1.weighty = 1.0;
    getContentPane().add(aboutScrollpane, gridBagConstraints1);

    aboutButtonPanel.setPreferredSize(new java.awt.Dimension(200, 33));

    OKButton.setText("OK");
    OKButton.addActionListener(new java.awt.event.ActionListener() {
                                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                                   OKButtonActionPerformed(evt);
                                 }
                               }
    );

    aboutButtonPanel.add(OKButton);


    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.insets = new java.awt.Insets(0, 0, 10, 0);
    getContentPane().add(aboutButtonPanel, gridBagConstraints1);

  }//GEN-END:initComponents

  private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
// Add your handling code here:
    closeDialog(new java.awt.event.WindowEvent(this,
        java.awt.event.WindowEvent.WINDOW_CLOSING));
  }//GEN-LAST:event_OKButtonActionPerformed

  /**
   * Closes the dialog
   */
  private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
    setVisible(false);
    dispose();
  }//GEN-LAST:event_closeDialog


  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    new HelpAboutDlg(new javax.swing.JFrame(), true).show();
  }


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JScrollPane aboutScrollpane;
  private javax.swing.JTextArea aboutText;
  private javax.swing.JPanel aboutButtonPanel;
  private javax.swing.JButton OKButton;
  // End of variables declaration//GEN-END:variables

}